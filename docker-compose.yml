version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: constructai-postgres
    environment:
      POSTGRES_DB: constructai
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - constructai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d constructai"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: constructai-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_REGION: us-east-1
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - constructai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: constructai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - constructai-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    container_name: constructai-gateway
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/constructai
      - REDIS_URL=redis://redis:6379
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - constructai-network
    volumes:
      - ./backend/gateway:/app
      - /app/node_modules
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./backend/services/user
      dockerfile: Dockerfile
    container_name: constructai-user-service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/constructai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - constructai-network
    restart: unless-stopped

  # Project Service
  project-service:
    build:
      context: ./backend/services/project
      dockerfile: Dockerfile
    container_name: constructai-project-service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/constructai
      - REDIS_URL=redis://redis:6379
      - MINIO_URL=http://minio:9000
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - constructai-network
    restart: unless-stopped

  # File Service
  file-service:
    build:
      context: ./backend/services/file
      dockerfile: Dockerfile
    container_name: constructai-file-service
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/constructai
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    depends_on:
      - postgres
      - minio
    networks:
      - constructai-network
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped

  # BOQ Service
  boq-service:
    build:
      context: ./backend/services/boq
      dockerfile: Dockerfile
    container_name: constructai-boq-service
    ports:
      - "8004:8000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/constructai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - constructai-network
    restart: unless-stopped

  # Vision AI Service
  vision-service:
    build:
      context: ./ai-services/vision
      dockerfile: Dockerfile
    container_name: constructai-vision-service
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - TORCH_SERVE_INFERENCE_ADDRESS=http://0.0.0.0:8080
      - TORCH_SERVE_MANAGEMENT_ADDRESS=http://0.0.0.0:8081
    volumes:
      - ./ai-services/models:/models
      - ./ai-services/vision/model-store:/model-store
    networks:
      - constructai-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # 3D Conversion Service
  conversion-service:
    build:
      context: ./ai-services/conversion
      dockerfile: Dockerfile
    container_name: constructai-conversion-service
    ports:
      - "8082:8080"
    environment:
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./ai-services/models:/models
      - ./ai-services/conversion/temp:/temp
    networks:
      - constructai-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # Local LLM Service (Ollama)
  ollama:
    image: ollama/ollama:latest
    container_name: constructai-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - constructai-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # Chatbot Service
  chatbot-service:
    build:
      context: ./backend/services/chatbot
      dockerfile: Dockerfile
    container_name: constructai-chatbot-service
    ports:
      - "8005:8000"
    environment:
      - DATABASE_URL=postgresql://admin:password@postgres:5432/constructai
      - OLLAMA_URL=http://ollama:11434
      - WHISPER_URL=http://whisper-service:8000
      - TTS_URL=http://tts-service:8000
    depends_on:
      - postgres
      - ollama
    networks:
      - constructai-network
    restart: unless-stopped

  # Whisper STT Service
  whisper-service:
    build:
      context: ./ai-services/whisper
      dockerfile: Dockerfile
    container_name: constructai-whisper-service
    ports:
      - "8083:8000"
    volumes:
      - ./ai-services/models:/models
    networks:
      - constructai-network
    restart: unless-stopped

  # Coqui TTS Service
  tts-service:
    build:
      context: ./ai-services/tts
      dockerfile: Dockerfile
    container_name: constructai-tts-service
    ports:
      - "8084:8000"
    volumes:
      - ./ai-services/models:/models
    networks:
      - constructai-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: constructai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - constructai-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: constructai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - constructai-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: constructai-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - constructai-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  constructai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
