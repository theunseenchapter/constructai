#!/usr/bin/env node

/**
 * ConstructAI 3D Model Generation - End-to-End Test
 * This script tests the complete 3D model generation pipeline
 */

import { execSync } from 'child_process';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';

const BASE_URL = 'http://localhost:3000';
const RENDERS_DIR = path.join(process.cwd(), 'public', 'renders');

async function testEndToEnd() {
  console.log('üß™ Starting End-to-End Test for ConstructAI 3D Model Generation');
  console.log('=' .repeat(60));
  
  try {
    // Test 1: API Health Check
    console.log('1Ô∏è‚É£ Testing API Health...');
    const healthResponse = await fetch(`${BASE_URL}/api/health`);
    if (!healthResponse.ok) {
      console.log('‚ö†Ô∏è API health check failed, but continuing...');
    }
    
    // Test 2: BOQ API with 3D Generation
    console.log('2Ô∏è‚É£ Testing BOQ API with 3D Generation...');
    const boqResponse = await fetch(`${BASE_URL}/api/boq/estimate-3d`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userRooms: [
          {
            name: 'Master Bedroom',
            dimensions: { length: 6, width: 5, height: 3 },
            materials: ['concrete', 'wood', 'glass']
          },
          {
            name: 'Living Room',
            dimensions: { length: 8, width: 6, height: 3 },
            materials: ['concrete', 'wood', 'glass']
          },
          {
            name: 'Kitchen',
            dimensions: { length: 4, width: 4, height: 3 },
            materials: ['concrete', 'steel', 'glass']
          }
        ]
      })
    });
    
    if (!boqResponse.ok) {
      throw new Error(`BOQ API failed: ${boqResponse.status}`);
    }
    
    const boqData = await boqResponse.json();
    console.log('‚úÖ BOQ API response received');
    
    // Test 3: Verify Professional 3D Data
    console.log('3Ô∏è‚É£ Verifying Professional 3D Data...');
    if (!boqData.professional_3d) {
      throw new Error('No professional_3d data in BOQ response');
    }
    
    const { professional_3d } = boqData;
    console.log(`‚úÖ Scene ID: ${professional_3d.scene_id}`);
    console.log(`‚úÖ Quality: ${professional_3d.quality}`);
    console.log(`‚úÖ Renderer: ${professional_3d.renderer}`);
    
    // Test 4: Verify Blender Files
    console.log('4Ô∏è‚É£ Verifying Blender Files...');
    if (!professional_3d.blender_files) {
      throw new Error('No blender_files in professional_3d data');
    }
    
    const { blender_files } = professional_3d;
    console.log(`‚úÖ OBJ File: ${blender_files.obj}`);
    console.log(`‚úÖ MTL File: ${blender_files.mtl}`);
    console.log(`‚úÖ BLEND File: ${blender_files.blend_file}`);
    console.log(`‚úÖ Renders: ${blender_files.renders.join(', ')}`);
    
    // Test 5: Verify Physical Files
    console.log('5Ô∏è‚É£ Verifying Physical Files...');
    const sceneId = professional_3d.scene_id;
    const objFile = path.join(RENDERS_DIR, `${sceneId}.obj`);
    const mtlFile = path.join(RENDERS_DIR, `${sceneId}.mtl`);
    const blendFile = path.join(RENDERS_DIR, `${sceneId}.blend`);
    const pngFile = path.join(RENDERS_DIR, `${sceneId}.png`);
    
    if (!fs.existsSync(objFile)) throw new Error('OBJ file not found');
    if (!fs.existsSync(mtlFile)) throw new Error('MTL file not found');
    if (!fs.existsSync(blendFile)) throw new Error('BLEND file not found');
    if (!fs.existsSync(pngFile)) throw new Error('PNG file not found');
    
    console.log('‚úÖ All files exist on disk');
    
    // Test 6: Verify File Accessibility
    console.log('6Ô∏è‚É£ Verifying File Accessibility...');
    const objUrl = `${BASE_URL}/renders/${sceneId}.obj`;
    const mtlUrl = `${BASE_URL}/renders/${sceneId}.mtl`;
    
    const objAccessible = await fetch(objUrl);
    const mtlAccessible = await fetch(mtlUrl);
    
    if (!objAccessible.ok) throw new Error('OBJ file not accessible via HTTP');
    if (!mtlAccessible.ok) throw new Error('MTL file not accessible via HTTP');
    
    console.log('‚úÖ Files accessible via HTTP');
    
    // Test 7: File Content Verification
    console.log('7Ô∏è‚É£ Verifying File Content...');
    const objContent = fs.readFileSync(objFile, 'utf8');
    const mtlContent = fs.readFileSync(mtlFile, 'utf8');
    
    if (!objContent.includes('# Generated by ConstructAI')) {
      throw new Error('OBJ file missing expected header');
    }
    if (!mtlContent.includes('# ConstructAI Material File')) {
      throw new Error('MTL file missing expected header');
    }
    
    console.log('‚úÖ File content verification passed');
    
    // Test Results Summary
    console.log('=' .repeat(60));
    console.log('üéâ END-TO-END TEST RESULTS: SUCCESS');
    console.log('=' .repeat(60));
    console.log(`üìä Test Results:`);
    console.log(`   ‚Ä¢ API Response: ‚úÖ Working`);
    console.log(`   ‚Ä¢ Professional 3D Data: ‚úÖ Present`);
    console.log(`   ‚Ä¢ File Generation: ‚úÖ Working`);
    console.log(`   ‚Ä¢ File Accessibility: ‚úÖ Working`);
    console.log(`   ‚Ä¢ Scene ID: ${sceneId}`);
    console.log(`   ‚Ä¢ Files Created: 4 (OBJ, MTL, BLEND, PNG)`);
    console.log(`   ‚Ä¢ HTTP Accessible: ‚úÖ Yes`);
    console.log('');
    console.log('üîó Test URLs:');
    console.log(`   ‚Ä¢ OBJ: ${objUrl}`);
    console.log(`   ‚Ä¢ MTL: ${mtlUrl}`);
    console.log(`   ‚Ä¢ Frontend: ${BASE_URL}`);
    console.log('');
    console.log('‚úÖ ConstructAI 3D Model Generation is fully functional!');
    
  } catch (error) {
    console.error('‚ùå END-TO-END TEST FAILED:', error.message);
    process.exit(1);
  }
}

// Run the test
testEndToEnd();
