import { NextRequest, NextResponse } from 'next/server'
import { exec } from 'child_process'
import { promisify } from 'util'
import path from 'path'
import fs from 'fs'

const execAsync = promisify(exec)

interface BlenderRequest {
  tool: string
  arguments: {
    rooms?: Array<{
      name: string
      type: string
      area: number
      width?: number
      length?: number
      height?: number
    }>
    building_dimensions?: {
      total_width: number
      total_length: number
      height: number
    }
  }
}

export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    const body: BlenderRequest = await request.json()
    console.log('üì• Received request to architectural blender-bridge API')
    
    if (body.tool !== 'generate_3d_model') {
      return NextResponse.json({
        success: false,
        error: 'Invalid tool specified'
      }, { status: 400 })
    }

    // Generate timestamp for unique file naming
    const timestamp = Date.now()

    // Create enhanced config for architectural renderer
    const enhancedConfig = {
      house: {
        rooms: body.arguments.rooms || [
          { name: "living_room", type: "living_room", width: 5, length: 4, area: 20 },
          { name: "bedroom", type: "bedroom", width: 4, length: 3, area: 12 },
          { name: "kitchen", type: "kitchen", width: 4, length: 3, area: 12 },
          { name: "bathroom", type: "bathroom", width: 2, length: 2, area: 4 }
        ]
      },
      building_dimensions: body.arguments.building_dimensions || {
        total_width: 15,
        total_length: 12,
        height: 3
      },
      render_settings: {
        resolution: "1920x1080",
        samples: 128,
        denoising: true,
        gpu_acceleration: true,
        camera_angles: ["top_down", "perspective"]
      },
      generation_seed: Math.floor(Math.random() * 1000000),
      timestamp: timestamp
    }

    // Create temporary config file
    const configPath = path.join(process.cwd(), `temp_architectural_floorplan_config_${timestamp}.json`)
    fs.writeFileSync(configPath, JSON.stringify(enhancedConfig, null, 2))

    // Run the architectural renderer
    const pythonScript = path.join(process.cwd(), 'architectural_floorplan_wrapper.py')
    const command = `python "${pythonScript}" "${configPath}"`
    
    console.log('üèóÔ∏è Running architectural floor plan renderer:', command)

    const { stdout, stderr } = await execAsync(command, { 
      cwd: process.cwd(),
      timeout: 300000, // 5 minutes
      env: {
        ...process.env,
        CUDA_VISIBLE_DEVICES: '0'
      }
    })

    console.log('üì§ Architectural renderer stdout:', stdout)
    if (stderr) console.log('‚ö†Ô∏è Architectural renderer stderr:', stderr)

    // Return response
    const scene_id = `architectural_detailed_${timestamp}`
    
    return NextResponse.json({
      success: true,
      data: {
        scene_id: scene_id,
        files: {
          obj_file: `renders/architectural_detailed_${timestamp}.obj`,
          mtl_file: `renders/architectural_detailed_${timestamp}.mtl`,
          blend_file: `renders/architectural_detailed_${timestamp}.blend`,
          preview_image: `renders/architectural_detailed_${timestamp}.png`
        },
        metadata: {
          renderer_type: 'architectural_floorplan',
          layout_type: 'architectural_floorplan', 
          style: 'professional_architecture',
          quality_level: 'detailed',
          gpu_used: 'NVIDIA RTX 4050',
          rooms_count: enhancedConfig.house.rooms.length,
          total_area: enhancedConfig.house.rooms.reduce((sum, r) => sum + (r.area || r.width * r.length), 0),
          building_dimensions: enhancedConfig.building_dimensions,
          generation_seed: enhancedConfig.generation_seed,
          render_resolution: enhancedConfig.render_settings.resolution
        }
      }
    })

  } catch (error) {
    console.error('‚ùå Error in architectural blender-bridge:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    }, { status: 500 })
  }
}

export async function GET(): Promise<NextResponse> {
  return NextResponse.json({
    success: true,
    message: 'Architectural Floor Plan Blender Bridge API is running',
    endpoints: {
      POST: 'Generate architectural 3D floor plans with proper interior walls and layout'
    },
    features: [
      'Architectural room planning without overlaps',
      'Interior walls with proper thickness', 
      'Doors and windows with real openings',
      'Room-specific materials and colors',
      'Professional furniture placement',
      'Top-down architectural floor plan view'
    ]
  })
}
